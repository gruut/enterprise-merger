// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protobuf_merger.proto
#ifndef GRPC_protobuf_5fmerger_2eproto__INCLUDED
#define GRPC_protobuf_5fmerger_2eproto__INCLUDED

#include "protobuf_merger.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace grpc_merger {

class MergerCommunication final {
 public:
  static constexpr char const* service_full_name() {
    return "grpc_merger.MergerCommunication";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status pushData(::grpc::ClientContext* context, const ::grpc_merger::MergerDataRequest& request, ::grpc_merger::MergerDataReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_merger::MergerDataReply>> AsyncpushData(::grpc::ClientContext* context, const ::grpc_merger::MergerDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_merger::MergerDataReply>>(AsyncpushDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_merger::MergerDataReply>> PrepareAsyncpushData(::grpc::ClientContext* context, const ::grpc_merger::MergerDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_merger::MergerDataReply>>(PrepareAsyncpushDataRaw(context, request, cq));
    }
    virtual ::grpc::Status ConnCheck(::grpc::ClientContext* context, const ::grpc_merger::ConnCheckRequest& request, ::grpc_merger::ConnCheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_merger::ConnCheckResponse>> AsyncConnCheck(::grpc::ClientContext* context, const ::grpc_merger::ConnCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_merger::ConnCheckResponse>>(AsyncConnCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_merger::ConnCheckResponse>> PrepareAsyncConnCheck(::grpc::ClientContext* context, const ::grpc_merger::ConnCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_merger::ConnCheckResponse>>(PrepareAsyncConnCheckRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_merger::MergerDataReply>* AsyncpushDataRaw(::grpc::ClientContext* context, const ::grpc_merger::MergerDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_merger::MergerDataReply>* PrepareAsyncpushDataRaw(::grpc::ClientContext* context, const ::grpc_merger::MergerDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_merger::ConnCheckResponse>* AsyncConnCheckRaw(::grpc::ClientContext* context, const ::grpc_merger::ConnCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_merger::ConnCheckResponse>* PrepareAsyncConnCheckRaw(::grpc::ClientContext* context, const ::grpc_merger::ConnCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status pushData(::grpc::ClientContext* context, const ::grpc_merger::MergerDataRequest& request, ::grpc_merger::MergerDataReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_merger::MergerDataReply>> AsyncpushData(::grpc::ClientContext* context, const ::grpc_merger::MergerDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_merger::MergerDataReply>>(AsyncpushDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_merger::MergerDataReply>> PrepareAsyncpushData(::grpc::ClientContext* context, const ::grpc_merger::MergerDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_merger::MergerDataReply>>(PrepareAsyncpushDataRaw(context, request, cq));
    }
    ::grpc::Status ConnCheck(::grpc::ClientContext* context, const ::grpc_merger::ConnCheckRequest& request, ::grpc_merger::ConnCheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_merger::ConnCheckResponse>> AsyncConnCheck(::grpc::ClientContext* context, const ::grpc_merger::ConnCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_merger::ConnCheckResponse>>(AsyncConnCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_merger::ConnCheckResponse>> PrepareAsyncConnCheck(::grpc::ClientContext* context, const ::grpc_merger::ConnCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_merger::ConnCheckResponse>>(PrepareAsyncConnCheckRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::grpc_merger::MergerDataReply>* AsyncpushDataRaw(::grpc::ClientContext* context, const ::grpc_merger::MergerDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_merger::MergerDataReply>* PrepareAsyncpushDataRaw(::grpc::ClientContext* context, const ::grpc_merger::MergerDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_merger::ConnCheckResponse>* AsyncConnCheckRaw(::grpc::ClientContext* context, const ::grpc_merger::ConnCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_merger::ConnCheckResponse>* PrepareAsyncConnCheckRaw(::grpc::ClientContext* context, const ::grpc_merger::ConnCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_pushData_;
    const ::grpc::internal::RpcMethod rpcmethod_ConnCheck_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status pushData(::grpc::ServerContext* context, const ::grpc_merger::MergerDataRequest* request, ::grpc_merger::MergerDataReply* response);
    virtual ::grpc::Status ConnCheck(::grpc::ServerContext* context, const ::grpc_merger::ConnCheckRequest* request, ::grpc_merger::ConnCheckResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_pushData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_pushData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_pushData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pushData(::grpc::ServerContext* context, const ::grpc_merger::MergerDataRequest* request, ::grpc_merger::MergerDataReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpushData(::grpc::ServerContext* context, ::grpc_merger::MergerDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc_merger::MergerDataReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConnCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ConnCheck() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ConnCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnCheck(::grpc::ServerContext* context, const ::grpc_merger::ConnCheckRequest* request, ::grpc_merger::ConnCheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnCheck(::grpc::ServerContext* context, ::grpc_merger::ConnCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc_merger::ConnCheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_pushData<WithAsyncMethod_ConnCheck<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_pushData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_pushData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_pushData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pushData(::grpc::ServerContext* context, const ::grpc_merger::MergerDataRequest* request, ::grpc_merger::MergerDataReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConnCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ConnCheck() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ConnCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnCheck(::grpc::ServerContext* context, const ::grpc_merger::ConnCheckRequest* request, ::grpc_merger::ConnCheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_pushData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_pushData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_pushData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status pushData(::grpc::ServerContext* context, const ::grpc_merger::MergerDataRequest* request, ::grpc_merger::MergerDataReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpushData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConnCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ConnCheck() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ConnCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnCheck(::grpc::ServerContext* context, const ::grpc_merger::ConnCheckRequest* request, ::grpc_merger::ConnCheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_pushData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_pushData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc_merger::MergerDataRequest, ::grpc_merger::MergerDataReply>(std::bind(&WithStreamedUnaryMethod_pushData<BaseClass>::StreamedpushData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_pushData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status pushData(::grpc::ServerContext* context, const ::grpc_merger::MergerDataRequest* request, ::grpc_merger::MergerDataReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedpushData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_merger::MergerDataRequest,::grpc_merger::MergerDataReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConnCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ConnCheck() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc_merger::ConnCheckRequest, ::grpc_merger::ConnCheckResponse>(std::bind(&WithStreamedUnaryMethod_ConnCheck<BaseClass>::StreamedConnCheck, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ConnCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConnCheck(::grpc::ServerContext* context, const ::grpc_merger::ConnCheckRequest* request, ::grpc_merger::ConnCheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConnCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_merger::ConnCheckRequest,::grpc_merger::ConnCheckResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_pushData<WithStreamedUnaryMethod_ConnCheck<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_pushData<WithStreamedUnaryMethod_ConnCheck<Service > > StreamedService;
};

}  // namespace grpc_merger


#endif  // GRPC_protobuf_5fmerger_2eproto__INCLUDED
