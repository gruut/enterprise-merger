// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf_se.proto

#ifndef PROTOBUF_INCLUDED_protobuf_5fse_2eproto
#define PROTOBUF_INCLUDED_protobuf_5fse_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_protobuf_5fse_2eproto 

namespace protobuf_protobuf_5fse_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_protobuf_5fse_2eproto
namespace grpc_se {
class GrpcMsgTX;
class GrpcMsgTXDefaultTypeInternal;
extern GrpcMsgTXDefaultTypeInternal _GrpcMsgTX_default_instance_;
class TxReply;
class TxReplyDefaultTypeInternal;
extern TxReplyDefaultTypeInternal _TxReply_default_instance_;
}  // namespace grpc_se
namespace google {
namespace protobuf {
template<> ::grpc_se::GrpcMsgTX* Arena::CreateMaybeMessage<::grpc_se::GrpcMsgTX>(Arena*);
template<> ::grpc_se::TxReply* Arena::CreateMaybeMessage<::grpc_se::TxReply>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace grpc_se {

enum TxReply_Status {
  TxReply_Status_SUCCESS = 0,
  TxReply_Status_INVALID = 1,
  TxReply_Status_INTERNAL = 2,
  TxReply_Status_TxReply_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TxReply_Status_TxReply_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TxReply_Status_IsValid(int value);
const TxReply_Status TxReply_Status_Status_MIN = TxReply_Status_SUCCESS;
const TxReply_Status TxReply_Status_Status_MAX = TxReply_Status_INTERNAL;
const int TxReply_Status_Status_ARRAYSIZE = TxReply_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* TxReply_Status_descriptor();
inline const ::std::string& TxReply_Status_Name(TxReply_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    TxReply_Status_descriptor(), value);
}
inline bool TxReply_Status_Parse(
    const ::std::string& name, TxReply_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TxReply_Status>(
    TxReply_Status_descriptor(), name, value);
}
// ===================================================================

class GrpcMsgTX : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_se.GrpcMsgTX) */ {
 public:
  GrpcMsgTX();
  virtual ~GrpcMsgTX();

  GrpcMsgTX(const GrpcMsgTX& from);

  inline GrpcMsgTX& operator=(const GrpcMsgTX& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GrpcMsgTX(GrpcMsgTX&& from) noexcept
    : GrpcMsgTX() {
    *this = ::std::move(from);
  }

  inline GrpcMsgTX& operator=(GrpcMsgTX&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GrpcMsgTX& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GrpcMsgTX* internal_default_instance() {
    return reinterpret_cast<const GrpcMsgTX*>(
               &_GrpcMsgTX_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GrpcMsgTX* other);
  friend void swap(GrpcMsgTX& a, GrpcMsgTX& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GrpcMsgTX* New() const final {
    return CreateMaybeMessage<GrpcMsgTX>(NULL);
  }

  GrpcMsgTX* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GrpcMsgTX>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GrpcMsgTX& from);
  void MergeFrom(const GrpcMsgTX& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrpcMsgTX* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:grpc_se.GrpcMsgTX)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protobuf_5fse_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TxReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:grpc_se.TxReply) */ {
 public:
  TxReply();
  virtual ~TxReply();

  TxReply(const TxReply& from);

  inline TxReply& operator=(const TxReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxReply(TxReply&& from) noexcept
    : TxReply() {
    *this = ::std::move(from);
  }

  inline TxReply& operator=(TxReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TxReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxReply* internal_default_instance() {
    return reinterpret_cast<const TxReply*>(
               &_TxReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TxReply* other);
  friend void swap(TxReply& a, TxReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxReply* New() const final {
    return CreateMaybeMessage<TxReply>(NULL);
  }

  TxReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxReply& from);
  void MergeFrom(const TxReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TxReply_Status Status;
  static const Status SUCCESS =
    TxReply_Status_SUCCESS;
  static const Status INVALID =
    TxReply_Status_INVALID;
  static const Status INTERNAL =
    TxReply_Status_INTERNAL;
  static inline bool Status_IsValid(int value) {
    return TxReply_Status_IsValid(value);
  }
  static const Status Status_MIN =
    TxReply_Status_Status_MIN;
  static const Status Status_MAX =
    TxReply_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    TxReply_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return TxReply_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return TxReply_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return TxReply_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .grpc_se.TxReply.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::grpc_se::TxReply_Status status() const;
  void set_status(::grpc_se::TxReply_Status value);

  // @@protoc_insertion_point(class_scope:grpc_se.TxReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protobuf_5fse_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GrpcMsgTX

// bytes message = 1;
inline void GrpcMsgTX::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GrpcMsgTX::message() const {
  // @@protoc_insertion_point(field_get:grpc_se.GrpcMsgTX.message)
  return message_.GetNoArena();
}
inline void GrpcMsgTX::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_se.GrpcMsgTX.message)
}
#if LANG_CXX11
inline void GrpcMsgTX::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_se.GrpcMsgTX.message)
}
#endif
inline void GrpcMsgTX::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_se.GrpcMsgTX.message)
}
inline void GrpcMsgTX::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_se.GrpcMsgTX.message)
}
inline ::std::string* GrpcMsgTX::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:grpc_se.GrpcMsgTX.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GrpcMsgTX::release_message() {
  // @@protoc_insertion_point(field_release:grpc_se.GrpcMsgTX.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GrpcMsgTX::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:grpc_se.GrpcMsgTX.message)
}

// -------------------------------------------------------------------

// TxReply

// .grpc_se.TxReply.Status status = 1;
inline void TxReply::clear_status() {
  status_ = 0;
}
inline ::grpc_se::TxReply_Status TxReply::status() const {
  // @@protoc_insertion_point(field_get:grpc_se.TxReply.status)
  return static_cast< ::grpc_se::TxReply_Status >(status_);
}
inline void TxReply::set_status(::grpc_se::TxReply_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:grpc_se.TxReply.status)
}

// string message = 2;
inline void TxReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TxReply::message() const {
  // @@protoc_insertion_point(field_get:grpc_se.TxReply.message)
  return message_.GetNoArena();
}
inline void TxReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:grpc_se.TxReply.message)
}
#if LANG_CXX11
inline void TxReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:grpc_se.TxReply.message)
}
#endif
inline void TxReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:grpc_se.TxReply.message)
}
inline void TxReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:grpc_se.TxReply.message)
}
inline ::std::string* TxReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:grpc_se.TxReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxReply::release_message() {
  // @@protoc_insertion_point(field_release:grpc_se.TxReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:grpc_se.TxReply.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpc_se

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::grpc_se::TxReply_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grpc_se::TxReply_Status>() {
  return ::grpc_se::TxReply_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_protobuf_5fse_2eproto
